- hosts: all
  become: yes
  vars:
    data_dir: /data
    data_disk: sdx
    cvp_size: ''
    cv_wifi_ha_cluster_ip: ''
    dns: '169.254.169.254'
    node_name: node1
    cvp_ntp: time.google.com
    cvp_ingest_key: arista

  tasks:
    - name: Image cleanup
      file:
        path: /etc/sysconfig/network-scripts/ifcfg-ens3
        state: absent

    - name: Resize root partition
      shell:
        cmd: bash -c "echo -e \"p\nd\n2\nn\np\n2\n\n\np\nw\nq\n\"|fdisk /dev/sda" || true

    - name: Reread root partition
      shell:
        cmd: partprobe

    - name: Resize root disk
      shell:
        cmd: resize2fs /dev/sda2

    - name: Prepare data disk
      filesystem:
        fstype: ext4
        dev: /dev/disk/by-id/scsi-0Google_PersistentDisk_{{ data_disk }}
        opts: -L cvp-data

    - name: Create data directory
      file:
        path: "{{ data_dir }}"
        state: directory

    - name: Mount data disk
      mount:
        path: "{{ data_dir }}"
        src: LABEL=cvp-data
        fstype: ext4
        state: mounted
        opts: noatime

    - name: Setup python
      yum:
        name:
          - python-setuptools
        state: latest

    - name: Upgrade pip
      pip:
        extra_args: --upgrade
        executable: pip3
        name: pip

    - name: Download EOS downloader
      get_url:
        url: https://raw.githubusercontent.com/arista-netdevops-community/eos-scripts/main/eos_download.py
        dest: "{{ data_dir }}/eos_download.py"
        mode: 0755

    - name: Setup downloader dependencies
      pip:
        extra_args: --upgrade
        executable: pip3
        name:
          - requests
          - tqdm
          - paramiko
          - scp

    - name: Download CVP
      block:
        - name: Run EOS downloader
          shell:
            cmd: "{{ data_dir }}/eos_download.py --api {{ api_token }} --ver cvp-{{ cvp_version }} --img rpm"
            chdir: "{{ data_dir }}"
            creates: cvp-rpm-installer-{{ cvp_version }}.md5
          register: cvp_downloaded

        - name: Check CVP download checksum
          shell:
            cmd: bash -c "if [ $(md5sum cvp-rpm-installer-{{ cvp_version }} |awk '{print $1}') != $(cat cvp-rpm-installer-{{ cvp_version }}.md5) ]; then echo Checksum does not match; exit 1; fi"
            chdir: "{{ data_dir }}"
          when: cvp_downloaded.changed
      rescue:
        - name: Remove broken download
          file:
            path: "{{ data_dir }}/cvp-rpm-installer-{{ cvp_version }}"
            state: absent
        - name: Run EOS downloader
          shell:
            cmd: "{{ data_dir }}/eos_download.py --api {{ api_token }} --ver cvp-{{ cvp_version }} --img rpm"
            chdir: "{{ data_dir }}"
            creates: cvp-rpm-installer-{{ cvp_version }}.md5
      any_errors_fatal: true

    - name: Enable firewalld
      service:
        name: firewalld
        enabled: yes
        state: started

    - name: Install CVP
      block:
        - name: Install CVP
          shell:
            cmd: bash {{ data_dir }}/cvp-rpm-installer-{{ cvp_version }} " " {{ cvp_size }}
            chdir: "{{ data_dir }}"
            creates: /cvpi
      rescue:
        - name: Remove temporary directory
          shell: rm -Rf /tmp/cvp.install.*

    # TODO: Support multiple interfaces
    - name: Get variables
      block:
        - name: Get hostname
          shell: hostname
          register: cvp_hostname
        - name: Get default route
          shell: ip route show|grep ^default|awk '{print $3}'
          register: cvp_default_route
        - name: Get IP address
          shell: hostname -i
          register: cvp_ip
        - name: Get DNS domain
          shell: hostname -d
          register: cvp_dns_domain
        # - name: Set template facts
        #   set_fact:
        #     template_hostname: "{{ hostname.stdout }}"
        #     template_default_route: "{{ default_route.stdout }}"
        #     template_ip: "{{ ip.stdout }}"
        #     cv_wifi_ha_cluster_ip: "{{ ip.stdout }}"
        #- name: Get netmask

    - name: Setup expect requirements
      pip:
        extra_args: --upgrade
        name:
          - pexpect

    - name: Configure CVP
      expect:
        command: su - cvpadmin
        echo: yes
        timeout: 2700
        responses:
          '>':
            - "s"
            - "a"
            - "q"
          'dns:': "{{ dns }}"
          'DNS domains:': "{{ cvp_dns_domain.stdout }}"
          'ntp:': "{{ cvp_ntp }}"
          'Telemetry Ingest Key:': "{{ cvp_ingest_key }}"
          'CloudVision WiFi Enabled: no': "\n"
          'Cluster Interface name: eth0': "\n"
          'Device Interface name: eth0': "\n"
          'hostname \(fqdn\):': "{{ cvp_hostname.stdout }}"
          'default route:': "{{ cvp_default_route.stdout }}"
          'Number of Static Routes:': "\n"
          'TACACS server ip address:': "\n"
          'IP address of eth0:': "\n"
          'Netmask of eth0: 255.255.255.255': "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b255.255.255.0"
          'yes/no:no': "\b\byes"
