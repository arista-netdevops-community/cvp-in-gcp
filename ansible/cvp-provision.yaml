- hosts: all
  become: yes
  vars:
    cv_wifi_ha_cluster_ip: ''
    cvp_cluster_interface: eth0
    cvp_device_interface: eth0
    cvp_dns:
      - '169.254.169.254'
    cvp_enable_advanced_login_options: "false"
    cvp_ingest_key: arista
    cvp_k8s_cluster_network: 10.42.0.0/16
    cvp_netmask: '255.255.255.0'
    cvp_ntp:
      - time.google.com
    cvp_public_ip: ''
    cvp_size: ''
    data_dir: /data
    data_disk: sdx
    node_name: node1

  tasks:
    - name: Image cleanup
      file:
        path: /etc/sysconfig/network-scripts/ifcfg-ens3
        state: absent

    # TODO: Only resize when required
    - name: Resize root partition
      shell:
        cmd: bash -c "echo -e \"p\nd\n2\nn\np\n2\n\n\np\nw\nq\n\"|fdisk /dev/sda" || true

    - name: Reread root partition
      shell:
        cmd: partprobe

    - name: Resize root disk
      shell:
        cmd: resize2fs /dev/sda2

    - name: Prepare data disk
      filesystem:
        fstype: ext4
        dev: /dev/disk/by-id/scsi-0Google_PersistentDisk_{{ data_disk }}
        opts: -L cvp-data

    - name: Create data directory
      file:
        path: "{{ data_dir }}"
        state: directory

    - name: Mount data disk
      mount:
        path: "{{ data_dir }}"
        src: LABEL=cvp-data
        fstype: ext4
        state: mounted
        opts: noatime

    - name: Setup python
      yum:
        name:
          - python-setuptools
        state: latest

    - name: Upgrade pip
      pip:
        extra_args: --upgrade
        executable: pip3
        name: pip

    - name: Download EOS downloader
      get_url:
        url: https://raw.githubusercontent.com/arista-netdevops-community/eos-scripts/main/eos_download.py
        dest: "{{ data_dir }}/eos_download.py"
        mode: 0755

    - name: Setup downloader dependencies
      pip:
        extra_args: --upgrade
        executable: pip3
        name:
          - requests
          - tqdm
          - paramiko
          - scp

    - name: Download CVP
      block:
        - name: Run EOS downloader
          shell:
            cmd: "{{ data_dir }}/eos_download.py --api {{ api_token }} --ver cvp-{{ cvp_version }} --img rpm"
            chdir: "{{ data_dir }}"
            creates: cvp-rpm-installer-{{ cvp_version }}.md5
          register: cvp_downloaded

        - name: Check CVP download checksum
          shell:
            cmd: bash -c "if [ $(md5sum cvp-rpm-installer-{{ cvp_version }} |awk '{print $1}') != $(cat cvp-rpm-installer-{{ cvp_version }}.md5) ]; then echo Checksum does not match; exit 1; fi"
            chdir: "{{ data_dir }}"
          when: cvp_downloaded.changed
      rescue:
        - name: Remove broken download
          file:
            path: "{{ data_dir }}/cvp-rpm-installer-{{ cvp_version }}"
            state: absent
        - name: Run EOS downloader
          shell:
            cmd: "{{ data_dir }}/eos_download.py --api {{ api_token }} --ver cvp-{{ cvp_version }} --img rpm"
            chdir: "{{ data_dir }}"
            creates: cvp-rpm-installer-{{ cvp_version }}.md5
      any_errors_fatal: true

    - name: Enable firewalld
      service:
        name: firewalld
        enabled: yes
        state: started

    - name: Install CVP
      block:
        - name: Install CVP
          shell:
            cmd: bash {{ data_dir }}/cvp-rpm-installer-{{ cvp_version }} " " {{ cvp_size }}
            chdir: "{{ data_dir }}"
            creates: /cvpi
      rescue:
        - name: Remove temporary directory
          shell: rm -Rf /tmp/cvp.install.*

    # TODO: Support multiple interfaces
    - name: Get variables
      block:
        - name: Get hostname
          shell: hostname
          register: cvp_hostname
        - name: Get default route
          shell: ip route show|grep ^default|awk '{print $3}'
          register: cvp_default_route
        - name: Get IP address
          shell: hostname -i
          register: cvp_ip
        - name: Get DNS domain
          shell: hostname -d
          register: cvp_dns_domain
        - name: Set template facts
          set_fact:
            template_hostname: "{{ cvp_hostname.stdout }}"
            template_default_route: "{{ cvp_default_route.stdout_lines.0 }}"
            template_ip: "{{ cvp_ip.stdout }}"
            template_wifi_ha_cluster_ip: "{{ cvp_ip.stdout }}"

    - name: Create configuration template
      template:
        src: cvp-config.jinja2
        dest: "{{ data_dir }}/.cvp-ansible-config.yaml"
      register: config_template

    - name: Configure CVP
      block:
        - name: Apply configuration template
          shell:
            cmd: python /cvpi/tools/cvpConfig.py -y {{ data_dir }}/.cvp-ansible-config.yaml -n {{ node_name }}
          when: config_template.changed

        - name: Start Zookeeper
          service:
            name: zookeeper
            enabled: yes
            state: started

        - name: Start docker
          service:
            name: docker
            enabled: yes
            state: started

        - name: Configure all services
          shell:
            cmd: cvpi config all
          become: true
          become_user: cvp
          become_method: su
          become_flags: '-s /bin/bash'
          when: config_template.changed

    - name: Start CVP
      block:
        - name: Start cvpi-check
          service:
            name: cvpi-check
            enabled: yes
            state: started

        - name: Start cvpi
          service:
            name: cvpi
            enabled: yes
            state: started

        - name: Start cvpi-watchdog
          service:
            name: cvpi-watchdog.timer
            enabled: yes
            state: started

    - name: Wait for CVP startup
      shell: while ! /cvpi/bin/cvpi status all; do echo still starting; done

    - name: Enable advanced login options
      shell: /cvpi/tools/apish publish -d cvp -p /aaa/device/settings --update '{"key":"singleSignOnEnabled","value":true}'
      when: cvp_enable_advanced_login_options == "true"