- hosts: all
  become: yes
  vars:
    cloud_provider: 'gcp'
    cv_wifi_ha_cluster_ip: ''
    cvp_authorized_keys: ''
    cvp_cluster_interface: eth0
    cvp_config: ''
    cvp_device_interface: eth0
    cvp_dns:
      - '169.254.169.254'
    cvp_enable_advanced_login_options: "false"
    cvp_ingest_key: arista
    cvp_k8s_cluster_network: 10.42.0.0/16
    cvp_netmask: '255.255.255.255'
    cvp_ntp:
      - time.google.com
    cvp_public_ip: ''
    cvp_size: ''
    cvp_private_key: ''
    data_dir: /data
    data_disk: sdx
    filesystem_lock: '/root/.ansible_filesystem'
    node_name: node1

  tasks:
    - name: Read CVP configuration
      include_vars: "{{ cvp_config }}"

    # - name: Dump Variables
    #   vars:
    #     msg: |
    #       Module Variables ("vars"):
    #       --------------------------------
    #       {{ vars | to_nice_json }}
    #   debug:
    #     msg: "{{ msg.split('\n') }}"
    #   tags: debug_info

    - name: Add custom routes (node1->node2)
      shell:
        cmd: ip route add {{ node2.interfaces.eth0.ip_address }} via {{ node1.default_route }} || true
      when: node_name == "node1" and node1.num_static_route == "2" and cloud_provider == "gcp"

    - name: Add custom routes (node1->node3)
      shell:
        cmd: ip route add {{ node3.interfaces.eth0.ip_address }} via {{ node1.default_route }} || true
      when: node_name == "node1" and node1.num_static_route == "2" and cloud_provider == "gcp"

    - name: Add custom routes (node2->node1)
      shell:
        cmd: ip route add {{ node1.interfaces.eth0.ip_address }} via {{ node2.default_route }} || true
      when: node_name == "node2" and node1.num_static_route == "2" and cloud_provider == "gcp"

    - name: Add custom routes (node2->node3)
      shell:
        cmd: ip route add {{ node3.interfaces.eth0.ip_address }} via {{ node2.default_route }} || true
      when: node_name == "node2" and node1.num_static_route == "2" and cloud_provider == "gcp"

    - name: Add custom routes (node3->node1)
      shell:
        cmd: ip route add {{ node1.interfaces.eth0.ip_address }} via {{ node3.default_route }} || true
      when: node_name == "node3" and node1.num_static_route == "2" and cloud_provider == "gcp"

    - name: Add custom routes (node3->node2)
      shell:
        cmd: ip route add {{ node2.interfaces.eth0.ip_address }} via {{ node3.default_route }} || true
      when: node_name == "node3" and node1.num_static_route == "2" and cloud_provider == "gcp"

    - name: Image cleanup
      file:
        path: /etc/sysconfig/network-scripts/ifcfg-ens3
        state: absent

    - name: Disable login failure messages
      shell: sed -i 's/showfailed//g' /etc/pam.d/postlogin

    # TODO: Only resize when required
    - name: Resize root partition
      shell:
        cmd: bash -c "echo -e \"p\nd\n2\nn\np\n2\n\n\np\nw\nq\n\"|fdisk /dev/sda" || true
        creates: "{{ filesystem_lock }}"

    - name: Reread root partition
      shell:
        cmd: partprobe
        creates: "{{ filesystem_lock }}"

    - name: Resize root disk
      shell:
        cmd: resize2fs /dev/sda2 && touch {{ filesystem_lock }}
        creates: "{{ filesystem_lock }}"

    - name: Prepare data disk
      filesystem:
        fstype: ext4
        dev: /dev/disk/by-id/scsi-0Google_PersistentDisk_{{ data_disk }}
        opts: -L cvp-data

    - name: Create data directory
      file:
        path: "{{ data_dir }}"
        state: directory

    - name: Mount data disk
      mount:
        path: "{{ data_dir }}"
        src: LABEL=cvp-data
        fstype: ext4
        state: mounted
        opts: noatime

    - name: Setup python
      yum:
        name:
          - python-setuptools
        state: latest

    # TODO: Use a virtualenv for python3
    - name: Upgrade pip
      pip:
        extra_args: --upgrade
        executable: pip3
        name: pip

    - name: Download EOS downloader
      get_url:
        url: https://raw.githubusercontent.com/diegolima/eos-scripts/main/eos_download.py
        dest: "{{ data_dir }}/eos_download.py"
        mode: 0755

    # TODO: Use a virtualenv for python3
    - name: Setup downloader dependencies
      pip:
        extra_args: --upgrade
        executable: pip3
        name:
          - requests
          - tqdm
          - paramiko
          - scp

    - name: Download CVP
      block:
        # TODO: Use a virtualenv for python3
        - name: Run EOS downloader
          shell:
            cmd: "/bin/python3 {{ data_dir }}/eos_download.py --api {{ api_token }} --ver cvp-{{ cvp_version }} --img rpm"
            chdir: "{{ data_dir }}"
            creates: cvp-rpm-installer-{{ cvp_version }}.md5
          register: cvp_downloaded

        - name: Check CVP download checksum
          shell:
            cmd: bash -c "if [ $(md5sum cvp-rpm-installer-{{ cvp_version }} |awk '{print $1}') != $(cat cvp-rpm-installer-{{ cvp_version }}.md5) ]; then echo Checksum does not match; exit 1; fi"
            chdir: "{{ data_dir }}"
          when: cvp_downloaded.changed
      rescue:
        - name: Re-run EOS downloader
          shell:
            cmd: "{{ data_dir }}/eos_download.py --api {{ api_token }} --ver cvp-{{ cvp_version }} --img rpm --overwrite"
            chdir: "{{ data_dir }}"
            creates: cvp-rpm-installer-{{ cvp_version }}.md5
          register: cvp_downloaded
        - name: Check CVP download checksum
          shell:
            cmd: bash -c "if [ $(md5sum cvp-rpm-installer-{{ cvp_version }} |awk '{print $1}') != $(cat cvp-rpm-installer-{{ cvp_version }}.md5) ]; then echo Checksum does not match; exit 1; fi"
            chdir: "{{ data_dir }}"
          when: cvp_downloaded.changed
      any_errors_fatal: true

    - name: Enable firewalld
      service:
        name: firewalld
        enabled: yes
        state: started

    - name: Install CVP
      block:
        - name: Install CVP
          shell:
            cmd: bash {{ data_dir }}/cvp-rpm-installer-{{ cvp_version }} " " {{ cvp_size }}
            chdir: "{{ data_dir }}"
            creates: /cvpi
      rescue:
        - name: Remove temporary directory
          shell: rm -Rf /tmp/cvp.install.*
        - name: Remove cvpi directory
          file:
            path: /cvpi
            state: absent
        - name: Remove /etc/cvp
          file:
            path: /etc/cvp
            state: absent
        - name: Abort run
          fail:
            msg: Could not install CVP

    - name: Copy configuration
      copy:
        src: "{{ cvp_config }}"
        dest: "/cvpi/cvp-config.yaml"
      register: config_template

    - name: Copy SSH keys
      block:
        # TODO: Figure out why naming a key id_rsa doesn't work
        # WARNING: HERE BE DRAGONS
        #          For some reason if a key filename is id_rsa the wrong key is sent to the ssh server.
        #          Simply naming it id_dsa worked, and I'm keeping it this way to avoid spending another
        #          countless hours of work.
        - name: Copy private key
          copy:
            src: "{{ cvp_private_key }}"
            dest: /home/cvp/.ssh/id_dsa
            owner: cvp
            mode: '600'
        - name: Copy authorized_keys
          copy:
            src: "{{ cvp_authorized_keys }}"
            dest: /home/cvp/.ssh/authorized_keys
            owner: cvp
            mode: '600'
        - name: Remove id_rsa
          file:
            path: /home/cvp/.ssh/id_rsa
            state: absent
        - name: Link id_dsa to id_rsa
          file:
            path: /home/cvp/.ssh/id_rsa
            state: link
            src: /home/cvp/.ssh/id_dsa

    - name: Configure CVP
      block:
        - name: Apply configuration template
          shell:
            cmd: python /cvpi/tools/cvpConfig.py -y /cvpi/cvp-config.yaml -n {{ node_name }}
          when: config_template.changed

        - name: Start Zookeeper
          service:
            name: zookeeper
            enabled: yes
            state: started

        - name: Start docker
          service:
            name: docker
            enabled: yes
            state: started

        - name: Start etcd
          service:
            name: etcd
            enabled: yes
            state: started
          when: cvp_version.split(".")[0]|int >= 2021

        - name: Configure all services
          shell:
            cmd: cvpi config all
          become: true
          become_user: cvp
          become_method: su
          become_flags: '-s /bin/bash'
          when: config_template.changed

    - name: Start CVP
      block:
        - name: Start cvpi-check
          service:
            name: cvpi-check
            enabled: yes
            state: started

        - name: Start cvpi
          service:
            name: cvpi
            enabled: yes
            state: started

        - name: Start cvpi-watchdog
          service:
            name: cvpi-watchdog.timer
            enabled: yes
            state: started

    - name: Wait for CVP startup
      shell: while ! /cvpi/bin/cvpi status all; do echo still starting; done
      when: node_name == "node1"

    - name: Enable advanced login options
      shell: /cvpi/tools/apish publish -d cvp -p /aaa/device/settings --update '{"key":"singleSignOnEnabled","value":true}'
      when: cvp_enable_advanced_login_options == "true" and node_name == "node1"